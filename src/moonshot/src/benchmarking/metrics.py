import inspect
from typing import Any

from moonshot.src.common.env_variables import EnvironmentVars
from moonshot.src.utils.import_modules import (
    create_module_spec,
    import_module_from_spec,
)

loaded_metric_modules = {}


def run_factscore(prompts: Any, predicted_results: Any, targets: Any) -> dict:
    """
    Compute the factscore metric for a given set of prompts, predicted results, and targets.

    Args:
        prompts (Any): The prompts used to generate the predicted results.
        predicted_results (Any): The predicted results generated by the model.
        targets (Any): The target results for the prompts.

    Returns:
        dict: A dictionary containing the factscore metric output for the given inputs.
    """
    # Import factscore module
    metrics_instances = load_metrics(["factscore"])

    # Get metrics output for this prompt template
    if metrics_instances:
        return metrics_instances[0].get_results(
            prompts,
            predicted_results,
            targets,
        )
    else:
        return {}


def load_metrics(metrics: list) -> list:
    # Create a new metric instance
    metrics_instances = []
    for metric in metrics:
        # Get the metric instance
        if metric in loaded_metric_modules:
            metric_instance = loaded_metric_modules[metric]
        else:
            metric_instance = _get_metric_instance(metric)
            if metric_instance:
                metric_instance = metric_instance()
            else:
                raise RuntimeError(
                    f"Unable to get defined metric instance - {metric_instance}"
                )
            loaded_metric_modules[metric] = metric_instance
        metrics_instances.append(metric_instance)
    return metrics_instances


def _get_metric_instance(metric_name: str) -> Any:
    """
    Returns an instance of the metric class with the specified metric name.

    Parameters:
        metric_name (str): The name of the metric.

    Returns:
        Any: An instance of the metric class if found, otherwise None.
    """
    # Create the module specification
    module_spec = create_module_spec(
        metric_name,
        f"{EnvironmentVars.METRICS}/{metric_name}.py",
    )

    # Check if the module specification exists
    if module_spec:
        # Import the module
        module = import_module_from_spec(module_spec)

        # Iterate through the attributes of the module
        for attr in dir(module):
            # Get the attribute object
            obj = getattr(module, attr)

            # Check if the attribute is a class and has the same module name as the metric name
            if inspect.isclass(obj) and obj.__module__ == metric_name:
                return obj

    # Return None if no instance of the metric class is found
    return None
