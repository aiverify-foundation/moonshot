name: SAST - Sonarqube

env:
  PROJECT_KEY:  'moonshot'

on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [ assigned, synchronize ]
    branches: [ main ]

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'main'
        type: string
            
  push:
    branches: [ ci/sonarcube-sast ]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true
  
jobs:  
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Set env variables
        run: |
          echo "project_key=${PROJECT_KEY}" >> $GITHUB_ENV
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "branch_to_test=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "branch_to_test=${{ github.ref }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "branch_to_test=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch_to_test }}
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0 # See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        with:
          args: >
            -Dsonar.projectKey=${{ env.project_key }}
            -Dssonar.scanner.metadataFilePath=${{ github.workspace }}
          #  -Dsonar.verbose=true 
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONARQUBE_SERVER_URL }}

      - name: Display scan results
        run: |
            SONAR_PROJECT_KEY=${{ env.project_key }}
            echo "Fetching SonarQube analysis results..."
            response=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: \
              "${{ vars.SONARQUBE_SERVER_URL }}/api/measures/component?component=${SONAR_PROJECT_KEY}&metricKeys=vulnerabilities,software_quality_reliability_issues,code_smells")
            vulnerabilities=$(echo $response | jq '.component.measures[] | select(.metric == "vulnerabilities") | .value')
            reliability=$(echo $response | jq '.component.measures[] | select(.metric == "software_quality_reliability_issues") | .value')
            maintainability=$(echo $response | jq '.component.measures[] | select(.metric == "code_smells") | .value')
            echo "vulnerabilities: $vulnerabilities, reliability: $reliability, maintainability: $maintainability"

            echo "Fetching vulnerability details..."
            vulnerabilities_details=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: \
              "${{ vars.SONARQUBE_SERVER_URL }}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=VULNERABILITY")
            echo "Vulnerability details: $vulnerabilities_details"

  
