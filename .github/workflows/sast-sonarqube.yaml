name: SAST - Sonarqube

on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [ assigned, synchronize ]
    branches: [ main ]

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'main'
        type: string
            
  push:
    branches: [ ci/sonarcube-sast ]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true
  
jobs:  
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Set env variables (pull request)
        if: github.event_name == 'pull_request'
        run: |
            echo "BRANCH_TO_TEST=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"

      - name: Set env variables (push)
        if: github.event_name == 'push'
        run: |
          echo "BRANCH_TO_TEST=${{ github.ref }}" >> "$GITHUB_ENV"

      - name: Set env variables (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BRANCH_TO_TEST=${{ inputs.branch_to_test }}" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_TO_TEST }}
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0 # See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        with:
          args: >
            -Dsonar.projectKey=moonshot
            -Dssonar.scanner.metadataFilePath=${{ github.workspace }}
          #  -Dsonar.verbose=true 
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONARQUBE_SERVER_URL }}

      - name: Display scan results
        run: |
          if [ -f "${{ github.workspace }}/report-task.txt" ]; then
            cat "${{ github.workspace }}/report-task.txt"
            SONAR_CE_TASK_ID=$(grep "ceTaskId" "${{ github.workspace }}/report-task.txt" | cut -d '=' -f 2)
            SONAR_PROJECT_KEY=$(grep "projectKey" "${{ github.workspace }}/report-task.txt" | cut -d '=' -f 2)
            if [ -n "$SONAR_CE_TASK_ID" ] && [ -n "$SONAR_PROJECT_KEY" ]; then
              echo "Fetching SonarQube analysis results..."
              response=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: \
                "${{ vars.SONARQUBE_SERVER_URL }}/api/measures/component?component=${SONAR_PROJECT_KEY}&metricKeys=vulnerabilities,software_quality_reliability_issues,code_smells")
              vulnerabilities=$(echo $response | jq '.component.measures[] | select(.metric == "vulnerabilities") | .value')
              reliability=$(echo $response | jq '.component.measures[] | select(.metric == "software_quality_reliability_issues") | .value')
              maintainability=$(echo $response | jq '.component.measures[] | select(.metric == "code_smells") | .value')
              echo "vulnerabilities: $vulnerabilities, reliability: $reliability, maintainability: $maintainability"
            else
              echo "SonarQube task ID or project key not found in report-task.txt"
            fi
          else
            echo "report-task.txt not found"
          fi

  
