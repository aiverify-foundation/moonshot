
name: "SAST - CodeQL"

on:
  # Run when code is pushed to the main branch
  push:
    branches: [ main ]

  # Run when pull requests are created against dev_main
  pull_request:
    branches: [ dev_main ]

  # Commented out scheduled run
  # Uncommenting would trigger the workflow weekly on Friday nights
#  schedule:
#    - cron: "5 14 * * 5"

  # Allow manual triggering with a branch parameter
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run scan'
        required: true
        default: 'dev_main'
        type: string

  # Allow other workflows to call this workflow with parameters
  workflow_call:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'dev_main'
        type: string

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # Access to upload code scanning results
      security-events: write
      # Access to fetch CodeQL packs
      packages: read
      # Permissions needed for private repositories
      actions: read
      contents: read

    # Define strategy for matrix jobs
    strategy:
      # Continue with other jobs even if one fails
      fail-fast: false
      matrix:
        # Define languages to analyze
        include:
        - language: python
          build-mode: none
        # Documentation for other supported languages and options
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    
    steps:

      # Set branch variable based on the event that triggered the workflow
      - name: Set branch variable
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "PR_NUM=#${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            echo "BRANCH=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
            echo "PR_NUM=#0" >> $GITHUB_ENV
          elif [[ ${{ github.event_name }} == 'push' ]]; then
            echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "PR_NUM=#0" >> $GITHUB_ENV
          elif [[ ${{ github.event_name }} == 'workflow_call' ]]; then
            echo "BRANCH=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
            echo "PR_NUM=#0" >> $GITHUB_ENV
          else
            echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "PR_NUM=#0" >> $GITHUB_ENV
          fi

      # Checkout the repository code to analyze
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          submodules: recursive

      # Set up the CodeQL tools and database
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # Configuration options for custom queries (commented)
          # queries: security-extended,security-and-quality

      # Run the CodeQL analysis
      - name: Perform CodeQL Analysis
        id: codeql_analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      # Generate a summary of the analysis results
      - name: Generate CodeQL Analysis Summary
        id: codeql_summary
        if: ${{ ! cancelled() }}
        run: |
          set +e
          source ci/run-codeql-summ.sh
          exit_code=$?
          set -e        
          echo "CODEQL_SUMMARY=$CODEQL_SUMMARY" >> $GITHUB_ENV
          exit $exit_code
        env:
          GH_TOKEN: ${{ github.token }}

      # Send a notification to Slack with the analysis results
      - name: Send slack notification
        if: ${{ ! cancelled() }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "workflow": "${{ github.repository }} - ${{ github.workflow }} - ${{ env.PR_NUM }}",
              "status": "SAST: ${{ steps.codeql_summary.outcome }}",
              "details": "${{ env.CODEQL_SUMMARY }}",
              "ref": "${{ github.server_url }}/${{ github.repository }}/security/code-scanning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          

