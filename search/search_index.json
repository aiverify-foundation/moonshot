{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>  _____           _           _     __  __                       _           _   \n |  __ \\         (_)         | |   |  \\/  |                     | |         | |  \n | |__) | __ ___  _  ___  ___| |_  | \\  / | ___   ___  _ __  ___| |__   ___ | |_ \n |  ___/ '__/ _ \\| |/ _ \\/ __| __| | |\\/| |/ _ \\ / _ \\| '_ \\/ __| '_ \\ / _ \\| __|\n | |   | | | (_) | |  __/ (__| |_  | |  | | (_) | (_) | | | \\__ \\ | | | (_) | |_ \n |_|   |_|  \\___/| |\\___|\\___|\\__| |_|  |_|\\___/ \\___/|_| |_|___/_| |_|\\___/ \\__|\n                _/ |                                                             \n               |__/                                                              \n</code></pre> <p>A simple and modular tool to evaluate and red-team any LLM application.</p> <p>Moonshot is a tool designed for AI developers and security experts to evaluate and red-team any LLM/ LLM application. In this initial version, Moonshot can be used through its interative Command Line Interface, within python notebooks (example), or even seamlessly integrated into your model development workflow to to run repeatable tests.</p>"},{"location":"acknowledgement/acknowledgement/","title":"Acknowledgements","text":""},{"location":"acknowledgement/acknowledgement/#datasets-used-in-moonshot-recipes","title":"Datasets used in Moonshot recipes","text":"Dataset Source License AdvGLUE https://adversarialglue.github.io/ Creative Commons Attribution 4.0 International Analogical Similarity https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/analogical_similarity Apache License Version 2.0, January 2004 AI2 Reasoning Challenge https://allenai.org/data/arc Creative Commons Attribution-ShareAlike 4.0 International Auto Categorization https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/auto_categorization Apache License Version 2.0, January 2004 BBQ https://github.com/nyu-mll/BBQ Creative Commons Attribution 4.0 International CBBQ https://github.com/YFHuangxxxx/CBBQ Creative Commons Attribution Share Alike 4.0 International Cause and Effect https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/cause_and_effect Apache License Version 2.0, January 2004 Challenging Toxicity Prompts https://decodingtrust.github.io/ Creative Commons Attribution ShareAlike 4.0 International Contextual Parametric Knowledge https://github.com/google-research/language Apache License Version 2.0, January 2004 CoQA https://stanfordnlp.github.io/coqa/ Creative Commons Attribution 4.0 International; MSR-LA;     Apache License Version 2.0, January 2004 CValues https://github.com/X-PLUG/CValues/tree/main Apache License Version 2.0, January 2004 Enron Email https://github.com/ParakweetLabs/EmailIntentDataSet Apache License Version 2.0, January 2004 GRE Reading Comprehension https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/gre_reading_comprehension Apache License Version 2.0, January 2004 GSM8K https://github.com/openai/grade-school-math MIT License HellaSwag https://github.com/rowanz/hellaswag MIT License MMLU https://github.com/hendrycks/test MIT License TR9856 https://aclanthology.org/P15-2069.pdf Creative Commons Attribution 3.0 International Winogrande https://github.com/allenai/winogrande Apache-2.0 License WORD https://aclanthology.org/L18-1408/ Creative Commons Attribution 3.0 International Real Toxicity Prompts https://github.com/allenai/real-toxicity-prompts/ Apache License Version 2.0, January 2004 Stanford Question Answering Dataset (SQuAD) https://modestyachts.github.io/squadshifts-website/ Creative Commons Attribution 4.0 International Tanglish Tweets for Sentiment Ananlysis https://www.kaggle.com/datasets/vyombhatia/tanglish-comments-for-sentiment-ananlysis/data Creative Commons Attribution 1.0 International Tamil News Classification https://github.com/vanangamudi/tamil-news-classification/tree/master/dataset/news GNU General Public License v3.0 Thirukkural Dataset https://github.com/vijayanandrp/Thirukkural-Tamil-Dataset Creative Commons Attribution 4.0 International TruthfulQA https://github.com/sylinrl/TruthfulQA Apache License Version 2.0, January 2004 UCI Adult https://archive.ics.uci.edu/dataset/2/adult Creative Commons Attribution 4.0 International"},{"location":"cli/benchmarking/","title":"Running Evaluation Benchmarks","text":""},{"location":"cli/benchmarking/#moonshot-cookbooks-recipes","title":"Moonshot Cookbooks &amp; Recipes","text":"<p>Through analysis of the myriad of open-source benchmarking tasks, we have identified a common structure that encapsulates the essence of these tasks. </p> <p></p> <ul> <li>Benchmark Datasets: Consists of the prompts to be sent to the model and the expected target. (if any)</li> <li>Scoring Mechanism: The method to score the model response.</li> <li>Pre &amp; Post Prompts: The Prompt Template of additional content to be appended to the prompts in the benchmark dataset before sending to the LLM.</li> <li>Recipe: Consists minimally of a benchmark dataset and the scoring mechnism(s) to be used to score it. (Prompt template is optional)</li> <li>Cookbook: A curated set of recipes to run.</li> </ul> <p>To run a cookbook via CLI</p> <ol> <li> <p>Activate Interactive Mode: <code>python -m moonshot cli interactive</code></p> </li> <li> <p>Run the help command for run_cookbook to better understand its usage.     <pre><code>run_cookbook --help\n</code></pre>     To run one prompt from the cookbook 'bbq-lite-age-cookbook' on the LLM endpoint 'my-openai-gpt35', enter:     <pre><code>run_cookbook -n 1 \"['bbq-lite-age-cookbook']\" \"['my-openai-gpt35']\"\n</code></pre></p> </li> <li> <p>Results will be displayed as a table and stored in <code>src/moonshot/data/results/</code></p> <p></p> </li> </ol> <p>Running Evaluation Benchmarks - Commands <pre><code>list_cookbooks        Get a list of available cookbooks.\nview_cookbook         View contents of a cookbook.\nadd_cookbook          Add a new cookbook.\nrun_cookbook          Run a cookbook.\nlist_prompt_templates List all prompt templates available.\nlist_recipes          Get a list of available recipes.\nadd_recipe            Add a new recipe.\nrun_recipe            Run a recipe.    \nview_results          View a specific results file.\nlist_results          Get a list of available results.\nlist_runs             Get a list of available runs.\nresume_run            Resume an interrupted run.\n</code></pre> You can run <code>&lt;command-name&gt; --help</code> to better understand the useage of a command.</p>"},{"location":"cli/cli_guide/","title":"Running Moonshot via CLI","text":"<p>Two modes are available on the Moonshot CLI: Command-Based Mode and Interactive Mode.</p> Full list of commands in Moonshot <pre><code>Initialisation\n======================================================================================================\ninteractive           Run the interactive shell.                                                      \nlist_connect_types    Get a list of available Language Model (LLM) connection types.                  \nlist_endpoints        Get a list of available Language Model (LLM) endpoints.                         \nversion               Get the version of the application.                                             \n\nMoonshot Benchmarking\n======================================================================================================\nadd_cookbook          Add a new cookbook.                                                             \nadd_endpoint          Add a new endpoint.                                                             \nadd_recipe            Add a new recipe.                                                               \nlist_cookbooks        Get a list of available cookbooks.                                              \nlist_recipes          Get a list of available recipes.                                                \nlist_results          Get a list of available results.                                                \nlist_runs             Get a list of available runs.                                                   \nresume_run            Resume an interrupted run.                                                      \nrun_cookbook          Run a cookbook.                                                                 \nrun_recipe            Run a recipe.                                                                   \nview_cookbook         View a cookbook.                                                                \nview_results          View a results file.                                                            \n\nMoonshot RedTeaming\n=======================================================================================================\nend_session            End the current session.                                                        \nlist_prompt_templates  List all prompt templates available.                                            \nlist_sessions          List all available sessions.                                                    \nnew_session            Add a new red teaming session.                                                  \nuse_context_strategy   Use a context strategy.                                                         \nuse_prompt_template    Use a prompt template.                                                          \nuse_session            Use an existing red teaming session.                                            \n\nUncategorized\n======================================================================================================\nalias                 Manage aliases                                                                  \nedit                  Run a text editor and optionally open a file with it                            \nhelp                  List available commands or provide detailed help for a specific command         \nhistory               View, run, edit, save, or clear previously entered commands                     \nmacro                 Manage macros                                                                   \nquit                  Exit this application                                                           \nrun_pyscript          Run a Python script file inside the console                                     \nrun_script            Run commands in script file that is encoded as either ASCII or UTF-8 text       \nset                   Set a settable parameter or show current settings of parameters                 \nshell                 Execute a command as if at the OS prompt                                        \nshortcuts             List available shortcuts                                                \n</code></pre>"},{"location":"cli/cli_guide/#command-based-mode","title":"Command-based Mode","text":"<p>In the command-based mode, run commands by prepending <code>python -m moonshot cli</code>. </p> <p>For example,</p> <ul> <li>To list all the available commands: <code>python -m moonshot cli help</code></li> <li>To list the connector types available: <code>python -m moonshot cli list_connect_types</code></li> </ul>"},{"location":"cli/cli_guide/#interactive-mode","title":"Interactive Mode","text":"<p>We recommend the interactive mode for a more efficient experience, especially if you are using Moonshot to red-team. </p> <p>To enter interactive mode: <code>python -m moonshot cli interactive</code> (You should see the command prompt change to <code>moonshot &gt;</code> ) For example, - To list all the available commands:      <pre><code>moonshot &gt; help\n</code></pre> - To list the connector types available:     <pre><code>moonshot &gt; list_connect_types\n</code></pre></p>"},{"location":"cli/connecting_endpoints/","title":"Connecting to LLMs","text":""},{"location":"cli/connecting_endpoints/#connecting-endpoints","title":"Connecting Endpoints","text":"<p>Establish and save connections to the endpoints of the LLMs that you wish to evaluate. </p> <p>Moonshot currently provides easy connection to: OpenAI's GPT4 &amp; GPT3.5, GPT2 and Llama2-13b-gptq on Hugging Face, and Anthropic's Claude2.</p> <p>Important</p> <p>Please note that you will most likely need to supply your own API token/key to connect to the LLM endpoints.</p> <p>To connect to these models, you simply need to create an endpoint configuration file under the directory <code>data/connectors-endpoints</code> and define the following fields in that file:</p> <ul> <li>type: The python module name of LLM that you would like to connect to. (It should be any ONE of the Python modules available at <code>data/connectors</code>) </li> <li>name: The name of this endpoint (It should also be the name of this file)</li> <li>uri: The URI of the LLM endpoint. </li> <li>token: Your API token/key to connect to the LLM endpoint.</li> <li>max_calls_per_second: The maximum number of API calls made to the LLM endpoint per second.</li> <li>max_concurrency: The maximum number of open concurrent connections to the LLM endpoint.</li> <li>params: The parameter(s) required to be sent to the LLM endpoint. (optional)</li> </ul> <p>For example, if you wish to create an endpoint configuration file to connect to Claude 2, you can create a file named <code>my-anthropic-claude2.json</code> in <code>data/connectors-endpoints</code>. The contents of <code>my-anthropic-claude2.json</code> should look something like this:</p> <pre><code>{\n    \"type\": \"claude2\",\n    \"name\": \"my-anthropic-claude2\",\n    \"uri\": \"&lt;your_endpoint_url&gt;\",\n    \"token\": \"&lt;your_api_token&gt;\",\n    \"max_calls_per_second\": 100,\n    \"max_concurrency\": 100,\n    \"params\": {}\n}\n</code></pre> <p>\ud83d\udca1Quick Start: If you have an OpenAI API key, simply edit the pre-configured endpoint at <code>my-openai-gpt35.json</code>, and you'll be able to start evaluating or red-teaming GPT3.5. </p> <p>Connecting LLMs - CLI Commands <pre><code>list_connect_types    Get a list of available LLM connection types.\nadd_endpoint          Add a new endpoint.\nlist_endpoints        Get a list of configured LLM endpoints.\n</code></pre> You can run <code>&lt;command-name&gt; --help</code> to better understand the usage of a command or view cli guide here.</p>"},{"location":"cli/red_teaming/","title":"Red Teaming","text":"<p>To send custom prompts to LLM endpoint(s), you need to first create a session. In a session, you can send prompts to multiple LLM endpoints (each endpoint will have its own chat), utilise prompt templates, and context strategies. </p> <ul> <li>Session: A group of Chat(s), depending on the number of endpoint(s) defined in the session. A Session can utilise one Prompt Template and Context Strategy at any one time. Every chat in a session will inherit the Prompt Template and Context Strategy set for the session.</li> <li>Endpoint: The URI of the LLM API, where your prompts will be sent to.</li> <li>Chat: The history of prompts and replies with a specific endpoint. Each endpoint in a session has a chat.</li> <li>Prompt Template: Additional static information that is appended to your prompt to form the final prompt. The final prompt will be sent to the endpoint.</li> <li>Context Strategy: Information to be sent with your current prompt to give a context or background to the LLM. Currently, the context strategy availabile are past prompt(s) and response(s) in the same chat. It is defined as an integer n, where n is the number of past prompts and responses to append to the current prompt.</li> </ul> <p>Sending a Prompt to Endpoint(s) via CLI</p> <ol> <li> <p>Create a session</p> <p>There are 3 parameters (name,description and list of endpoint(s)) required when creating a session. In this example, we are creating a session with 1 endpoint: <pre><code>new_session my_test_sess \"this is a session description\" '[\"my-openai-gpt35\"]'\n</code></pre></p> </li> <li> <p>Configure a prompt template for this session (optional)</p> <ul> <li> <p>Once you have created a session, you can specify a prompt template to use for all the chats in this session. </p> <pre><code>use_prompt_template &lt;name of prompt template&gt; \n</code></pre> <ul> <li>To see the list of prompt templates availabile:     <pre><code>list_prompt_templates\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Configure a context strategy for this session (optional)</p> <ul> <li> <p>You can also specify the context strategy for the current session.</p> <pre><code>use_context_strategy &lt;number of previous prompts&gt;\n</code></pre> </li> </ul> </li> <li> <p>Send the prompt to the endpoint by typing into the terminal directly (the following example has a prompt template and context strategy set to prepend to the prompt):</p> <ul> <li>Prompt template: <code>auto-categorisation</code> with the following contents: <code>For the following statement, provide a short word or phrase as the completion of the sentence:</code></li> <li>Context strategy: <code>1</code> (<code>1</code> previous prompt and response used as the context for the current prompt)</li> <li>Current prompt: <code>the capital of cambodia is</code> </li> <li> <p>Results:</p> <p></p> </li> </ul> </li> </ol> <p>Tip</p> <p>You can view the current prompt template and context strategy set by referring to <code>PT</code> and <code>CS</code> respectively in the CLI.</p> <p>Red Teaming - Commands <pre><code>new_session            Add a new red teaming session.\nlist_sessions          List all available sessions.\nuse_session            Use an existing red teaming session.\nend_session            End the current session.\nlist_prompt_templates  List all prompt templates available.\nuse_prompt_template    Use a prompt template.\nuse_context_strategy   Use a context strategy.\n</code></pre> You can run <code>&lt;command-name&gt; --help</code> to better understand the usage of a command.</p>"},{"location":"examples/example/","title":"Examples","text":"<p>In this Jupyter notebook, we demonstrate how you can leverage on the Moonshot library to:</p> <ul> <li>Connect to OpenAI's GPT-3.5</li> <li>Create your own recipes and cookbooks</li> <li>Run benchmarks</li> </ul>"},{"location":"getting_started/installation/","title":"Installing Moonshot","text":"<p>The source code is available on GitHub at: https://github.com/moonshot-admin/moonshot.</p>"},{"location":"getting_started/installation/#installation-from-pypi","title":"Installation from PyPi","text":"<p>You can find the Moonshot Package here.</p> <p>This project requires Python 3.11  or later. Make sure you have Python 3.11 installed on your system before proceeding with installation and usage.</p> <p>To install Moonshot, there is 4 options that you can choose from. <pre><code>$ pip install moonshot\n$ pip install moonshot[cli] #To enable running Moonshot using the CLI.\n$ pip install moonshot[web-api] #To enable running Moonshot using the web API.\n$ pip install moonshot[all] #To enable running Moonshot using the CLI and web API.\n</code></pre> Each installation command installs only the necessary dependencies required to run Moonshot based on your specific use case.</p>"},{"location":"getting_started/installation/#installation-from-source","title":"Installation from Source","text":"<ol> <li>Download the source files by cloning this repositiry. i.e. Git clone (via SSH): <pre><code>$ git clone git@github.com:moonshot-admin/moonshot.git\n</code></pre></li> <li>Change directory to project's root directory: <pre><code>$ cd moonshot\n</code></pre></li> <li>Install the required packages: <pre><code>$ pip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"understanding_moonshot/api/","title":"API","text":""},{"location":"understanding_moonshot/api/#moonshot.api.api_create_connector","title":"<code>api_create_connector(ep_id)</code>","text":"<p>Creates a connector based on the provided endpoint ID.</p> <p>This function retrieves the endpoint arguments using the provided endpoint ID and then creates a connector based on those arguments. It utilizes the ConnectorManager's read_endpoint method to fetch the endpoint arguments and then calls the create_connector method to initialize and return the connector.</p> <p>Parameters:</p> Name Type Description Default <code>ep_id</code> <code>str</code> <p>The ID of the endpoint for which to create a connector.</p> required <p>Returns:</p> Name Type Description <code>Connector</code> <code>Connector</code> <p>An initialized Connector object.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_connector(ep_id: str) -&gt; Connector:\n    \"\"\"\n    Creates a connector based on the provided endpoint ID.\n\n    This function retrieves the endpoint arguments using the provided endpoint ID and then creates a connector\n    based on those arguments. It utilizes the ConnectorManager's read_endpoint method to fetch the endpoint\n    arguments and then calls the create_connector method to initialize and return the connector.\n\n    Args:\n        ep_id (str): The ID of the endpoint for which to create a connector.\n\n    Returns:\n        Connector: An initialized Connector object.\n    \"\"\"\n    return ConnectorManager.create_connector(ConnectorManager.read_endpoint(ep_id))\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_connectors","title":"<code>api_create_connectors(ep_ids)</code>","text":"<p>Creates connectors for multiple endpoints based on their IDs.</p> <p>This function takes a list of endpoint IDs, retrieves the corresponding endpoint arguments for each ID, and then creates and returns a list of connector objects based on those arguments. It utilizes the ConnectorManager's read_endpoint method to fetch the endpoint arguments and the create_connector method to initialize the connectors.</p> <p>Parameters:</p> Name Type Description Default <code>ep_ids</code> <code>list[str]</code> <p>A list of endpoint IDs for which connectors are to be created.</p> required <p>Returns:</p> Type Description <code>list[Connector]</code> <p>list[Connector]: A list of initialized Connector objects.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_connectors(ep_ids: list[str]) -&gt; list[Connector]:\n    \"\"\"\n    Creates connectors for multiple endpoints based on their IDs.\n\n    This function takes a list of endpoint IDs, retrieves the corresponding endpoint arguments for each ID, and then\n    creates and returns a list of connector objects based on those arguments. It utilizes the ConnectorManager's\n    read_endpoint method to fetch the endpoint arguments and the create_connector method to initialize the connectors.\n\n    Args:\n        ep_ids (list[str]): A list of endpoint IDs for which connectors are to be created.\n\n    Returns:\n        list[Connector]: A list of initialized Connector objects.\n    \"\"\"\n    return [\n        ConnectorManager.create_connector(ConnectorManager.read_endpoint(ep_id))\n        for ep_id in ep_ids\n    ]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_cookbook","title":"<code>api_create_cookbook(name, description, recipes)</code>","text":"<p>Creates a new cookbook.</p> <p>This function takes the name, description, and recipes for a new cookbook as input. It then creates a new CookbookArguments object with these details and an empty id. The id is left empty because it will be generated from the name during the creation process. The function then calls the Cookbook's create_cookbook method to create the new cookbook.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new cookbook.</p> required <code>description</code> <code>str</code> <p>A brief description of the new cookbook.</p> required <code>recipes</code> <code>list[str]</code> <p>A list of recipes to be included in the new cookbook.</p> required Source code in <code>moonshot/api.py</code> <pre><code>def api_create_cookbook(name: str, description: str, recipes: list[str]) -&gt; None:\n    \"\"\"\n    Creates a new cookbook.\n\n    This function takes the name, description, and recipes for a new cookbook as input. It then creates a new\n    CookbookArguments object with these details and an empty id. The id is left empty because it will be generated\n    from the name during the creation process. The function then calls the Cookbook's create_cookbook method to\n    create the new cookbook.\n\n    Args:\n        name (str): The name of the new cookbook.\n        description (str): A brief description of the new cookbook.\n        recipes (list[str]): A list of recipes to be included in the new cookbook.\n    \"\"\"\n    # Create a new cookbook\n    # We do not need to provide the id.\n    # This is because during creation:\n    # 1. the id is slugify from the name and stored as id.\n    cb_args = CookbookArguments(\n        id=\"\",\n        name=name,\n        description=description,\n        recipes=recipes,\n    )\n    Cookbook.create_cookbook(cb_args)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_cookbook_executor","title":"<code>api_create_cookbook_executor(name, cookbooks, endpoints, num_of_prompts, progress_callback_func=None)</code>","text":"<p>Creates a new cookbook executor.</p> <p>This function takes a name, a list of cookbooks, a list of endpoints, a number of prompts, and an optional progress callback function as input. It creates a new BenchmarkExecutor instance with these parameters and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new cookbook executor.</p> required <code>cookbooks</code> <code>list[str]</code> <p>A list of cookbooks for the new executor.</p> required <code>endpoints</code> <code>list[str]</code> <p>A list of endpoints for the new executor.</p> required <code>num_of_prompts</code> <code>int</code> <p>The number of prompts for the new executor.</p> required <code>progress_callback_func</code> <code>Union[Callable, None]</code> <p>An optional progress callback function for the new executor.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BenchmarkExecutor</code> <code>BenchmarkExecutor</code> <p>The newly created cookbook executor.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_cookbook_executor(\n    name: str,\n    cookbooks: list[str],\n    endpoints: list[str],\n    num_of_prompts: int,\n    progress_callback_func: Union[Callable, None] = None,\n) -&gt; BenchmarkExecutor:\n    \"\"\"\n    Creates a new cookbook executor.\n\n    This function takes a name, a list of cookbooks, a list of endpoints, a number of prompts, and an optional progress\n    callback function as input.\n    It creates a new BenchmarkExecutor instance with these parameters and returns it.\n\n    Args:\n        name (str): The name of the new cookbook executor.\n        cookbooks (list[str]): A list of cookbooks for the new executor.\n        endpoints (list[str]): A list of endpoints for the new executor.\n        num_of_prompts (int): The number of prompts for the new executor.\n        progress_callback_func (Union[Callable, None]): An optional progress callback function for the new executor.\n\n    Returns:\n        BenchmarkExecutor: The newly created cookbook executor.\n    \"\"\"\n    # Create a new cookbook executor\n    # We do not need to provide the id.\n    # This is because during creating:\n    # 1. the id is slugify from the name and stored as id.\n    be_args = BenchmarkExecutorArguments(\n        id=\"\",\n        name=name,\n        type=BenchmarkExecutorTypes.COOKBOOK,\n        cookbooks=cookbooks,\n        endpoints=endpoints,\n        num_of_prompts=num_of_prompts,\n        progress_callback_func=progress_callback_func,\n    )\n    return BenchmarkExecutor.create_executor(be_args)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_endpoint","title":"<code>api_create_endpoint(name, connector_type, uri, token, max_calls_per_second, max_concurrency, params)</code>","text":"<p>Creates a new endpoint to the connector manager.</p> <p>This function creates a new connector endpoint with the specified parameters. It constructs a ConnectorEndpointArguments object with the provided details and then calls the ConnectorManager's create_endpoint method to add the new endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new endpoint.</p> required <code>connector_type</code> <code>str</code> <p>The type of the connector (e.g., 'GPT-3', 'Bert', etc.).</p> required <code>uri</code> <code>str</code> <p>The URI for the connector's API.</p> required <code>token</code> <code>str</code> <p>The access token for the API.</p> required <code>max_calls_per_second</code> <code>int</code> <p>The maximum number of API calls allowed per second.</p> required <code>max_concurrency</code> <code>int</code> <p>The maximum number of concurrent API calls.</p> required <code>params</code> <code>dict</code> <p>Additional parameters for the connector.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_endpoint(\n    name: str,\n    connector_type: str,\n    uri: str,\n    token: str,\n    max_calls_per_second: int,\n    max_concurrency: int,\n    params: dict,\n) -&gt; None:\n    \"\"\"\n    Creates a new endpoint to the connector manager.\n\n    This function creates a new connector endpoint with the specified parameters. It constructs a\n    ConnectorEndpointArguments object with the provided details and then calls the ConnectorManager's create_endpoint\n    method to add the new endpoint.\n\n    Args:\n        name (str): The name of the new endpoint.\n        connector_type (str): The type of the connector (e.g., 'GPT-3', 'Bert', etc.).\n        uri (str): The URI for the connector's API.\n        token (str): The access token for the API.\n        max_calls_per_second (int): The maximum number of API calls allowed per second.\n        max_concurrency (int): The maximum number of concurrent API calls.\n        params (dict): Additional parameters for the connector.\n\n    Returns:\n        None\n    \"\"\"\n    # Create a new connector endpoint arguments instance.\n    # We do not need to provide id and created_date.\n    # This is because during creation:\n    #   1. the id is slugify from the name and stored as id.\n    #   2. the created_date is based on the os file created date and time.\n    connector_endpoint_args = ConnectorEndpointArguments(\n        id=\"\",\n        name=name,\n        connector_type=connector_type,\n        uri=uri,\n        token=token,\n        max_calls_per_second=max_calls_per_second,\n        max_concurrency=max_concurrency,\n        params=params,\n        created_date=\"\",\n    )\n    ConnectorManager.create_endpoint(connector_endpoint_args)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_recipe","title":"<code>api_create_recipe(name, description, tags, datasets, prompt_templates, metrics)</code>","text":"<p>Creates a new recipe.</p> <p>This function takes a name, description, tags, datasets, prompt templates, and metrics as input, and creates a new recipe. It constructs a RecipeArguments object with the provided details and then calls the Recipe's create_recipe method to add the new recipe.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new recipe.</p> required <code>description</code> <code>str</code> <p>The description of the recipe.</p> required <code>tags</code> <code>list[str]</code> <p>The tags associated with the recipe.</p> required <code>datasets</code> <code>list[str]</code> <p>The datasets used in the recipe.</p> required <code>prompt_templates</code> <code>list[str]</code> <p>The prompt templates used in the recipe.</p> required <code>metrics</code> <code>list[str]</code> <p>The metrics used in the recipe.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_recipe(\n    name: str,\n    description: str,\n    tags: list[str],\n    datasets: list[str],\n    prompt_templates: list[str],\n    metrics: list[str],\n) -&gt; None:\n    \"\"\"\n    Creates a new recipe.\n\n    This function takes a name, description, tags, datasets, prompt templates, and metrics as input, and creates a\n    new recipe. It constructs a RecipeArguments object with the provided details and then calls the Recipe's\n    create_recipe method to add the new recipe.\n\n    Args:\n        name (str): The name of the new recipe.\n        description (str): The description of the recipe.\n        tags (list[str]): The tags associated with the recipe.\n        datasets (list[str]): The datasets used in the recipe.\n        prompt_templates (list[str]): The prompt templates used in the recipe.\n        metrics (list[str]): The metrics used in the recipe.\n\n    Returns:\n        None\n    \"\"\"\n    # Create a new recipe\n    # We do not need to provide the id.\n    # This is because during creation:\n    # 1. the id is slugify from the name and stored as id.\n    rec_args = RecipeArguments(\n        id=\"\",\n        name=name,\n        description=description,\n        tags=tags,\n        datasets=datasets,\n        prompt_templates=prompt_templates,\n        metrics=metrics,\n    )\n    Recipe.create_recipe(rec_args)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_recipe_executor","title":"<code>api_create_recipe_executor(name, recipes, endpoints, num_of_prompts, progress_callback_func=None)</code>","text":"<p>Creates a new recipe executor.</p> <p>This function takes a name, a list of recipes, a list of endpoints, a number of prompts, and an optional progress callback function as input. It creates a new BenchmarkExecutor instance with these parameters and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new recipe executor.</p> required <code>recipes</code> <code>list[str]</code> <p>A list of recipes for the new executor.</p> required <code>endpoints</code> <code>list[str]</code> <p>A list of endpoints for the new executor.</p> required <code>num_of_prompts</code> <code>int</code> <p>The number of prompts for the new executor.</p> required <code>progress_callback_func</code> <code>Union[Callable, None]</code> <p>An optional progress callback function for the new executor.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BenchmarkExecutor</code> <code>BenchmarkExecutor</code> <p>The newly created recipe executor.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_recipe_executor(\n    name: str,\n    recipes: list[str],\n    endpoints: list[str],\n    num_of_prompts: int,\n    progress_callback_func: Union[Callable, None] = None,\n) -&gt; BenchmarkExecutor:\n    \"\"\"\n    Creates a new recipe executor.\n\n    This function takes a name, a list of recipes, a list of endpoints, a number of prompts, and an optional progress\n    callback function as input.\n    It creates a new BenchmarkExecutor instance with these parameters and returns it.\n\n    Args:\n        name (str): The name of the new recipe executor.\n        recipes (list[str]): A list of recipes for the new executor.\n        endpoints (list[str]): A list of endpoints for the new executor.\n        num_of_prompts (int): The number of prompts for the new executor.\n        progress_callback_func (Union[Callable, None]): An optional progress callback function for the new executor.\n\n    Returns:\n        BenchmarkExecutor: The newly created recipe executor.\n    \"\"\"\n    # Create a new recipe executor\n    # We do not need to provide the id.\n    # This is because during creating:\n    # 1. the id is slugify from the name and stored as id.\n    be_args = BenchmarkExecutorArguments(\n        id=\"\",\n        name=name,\n        type=BenchmarkExecutorTypes.RECIPE,\n        recipes=recipes,\n        endpoints=endpoints,\n        num_of_prompts=num_of_prompts,\n        progress_callback_func=progress_callback_func,\n    )\n    return BenchmarkExecutor.create_executor(be_args)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_create_session","title":"<code>api_create_session(name, description, endpoints, context_strategy='', prompt_template='')</code>","text":"<p>Creates a new session with the specified parameters and returns the session instance. This API endpoint facilitates the creation of a new session by wrapping around the <code>SessionManager.create_session</code> method. It allows clients to specify session details such as name, description, associated endpoints, context strategy, and prompt template. This method is particularly useful for initializing sessions with custom configurations for red teaming exercises or other operational scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the new session.</p> required <code>description</code> <code>str</code> <p>A brief description of the session.</p> required <code>endpoints</code> <code>list</code> <p>A list of endpoints that the session will interact with.</p> required <code>context_strategy</code> <code>str</code> <p>The strategy for managing context within the session.</p> <code>''</code> <code>prompt_template</code> <code>str</code> <p>The template for generating prompts within the session.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>Session</code> <code>Session</code> <p>The newly created session instance.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_create_session(\n    name: str,\n    description: str,\n    endpoints: list,\n    context_strategy: str = \"\",\n    prompt_template: str = \"\",\n) -&gt; Session:\n    \"\"\"\n    Creates a new session with the specified parameters and returns the session instance.\n    This API endpoint facilitates the creation of a new session by wrapping around the `SessionManager.create_session`\n    method. It allows clients to specify session details such as name, description, associated endpoints,\n    context strategy, and prompt template. This method is particularly useful for initializing sessions with custom\n    configurations for red teaming exercises or other operational scenarios.\n\n    Args:\n        name (str): The name of the new session.\n        description (str): A brief description of the session.\n        endpoints (list): A list of endpoints that the session will interact with.\n        context_strategy (str, optional): The strategy for managing context within the session.\n        prompt_template (str, optional): The template for generating prompts within the session.\n\n    Returns:\n        Session: The newly created session instance.\n    \"\"\"\n    return SessionManager.create_session(\n        name, description, endpoints, context_strategy, prompt_template\n    )\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_context_strategy","title":"<code>api_delete_context_strategy(context_strategy_name)</code>","text":"<p>Deletes a context strategy based on the provided name.</p> <p>This API endpoint interfaces with the <code>ContextStrategyManager.delete_context_strategy</code> method, facilitating the removal of a specified context strategy from the system. It is particularly useful for managing the lifecycle of context strategies, allowing for the deletion of strategies that are no longer needed or relevant.</p> <p>Parameters:</p> Name Type Description Default <code>context_strategy_name</code> <code>str</code> <p>The name of the context strategy to be deleted</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return a value, but it will remove the specified context strategy from the system.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_context_strategy(context_strategy_name: str) -&gt; None:\n    \"\"\"\n    Deletes a context strategy based on the provided name.\n\n    This API endpoint interfaces with the `ContextStrategyManager.delete_context_strategy` method, facilitating the\n    removal of a specified context strategy from the system. It is particularly useful for managing the lifecycle of\n    context strategies, allowing for the deletion of strategies that are no longer needed or relevant.\n\n    Args:\n        context_strategy_name (str): The name of the context strategy to be deleted\n\n    Returns:\n        None: This method does not return a value, but it will remove the specified context strategy from the system.\n    \"\"\"\n    ContextStrategyManager.delete_context_strategy(context_strategy_name)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_cookbook","title":"<code>api_delete_cookbook(cb_id)</code>","text":"<p>Deletes a cookbook.</p> <p>This function calls the <code>delete_cookbook</code> method of the <code>Cookbook</code> class, which deletes the cookbook corresponding to the provided ID.</p> <p>Parameters:</p> Name Type Description Default <code>cb_id</code> <code>str</code> <p>The ID of the cookbook to delete.</p> required Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_cookbook(cb_id: str) -&gt; None:\n    \"\"\"\n    Deletes a cookbook.\n\n    This function calls the `delete_cookbook` method of the `Cookbook` class, which deletes the cookbook\n    corresponding to the provided ID.\n\n    Args:\n        cb_id (str): The ID of the cookbook to delete.\n    \"\"\"\n    Cookbook.delete_cookbook(cb_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_endpoint","title":"<code>api_delete_endpoint(ep_id)</code>","text":"<p>Deletes an existing endpoint in the connector manager.</p> <p>This function deletes an existing endpoint in the connector manager using the provided endpoint ID. It calls the ConnectorManager's delete_endpoint method to delete the endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>ep_id</code> <code>str</code> <p>The ID of the endpoint to be deleted.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_endpoint(ep_id: str) -&gt; None:\n    \"\"\"\n    Deletes an existing endpoint in the connector manager.\n\n    This function deletes an existing endpoint in the connector manager using the provided endpoint ID.\n    It calls the ConnectorManager's delete_endpoint method to delete the endpoint.\n\n    Args:\n        ep_id (str): The ID of the endpoint to be deleted.\n\n    Returns:\n        None\n    \"\"\"\n    ConnectorManager.delete_endpoint(ep_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_executor","title":"<code>api_delete_executor(be_id)</code>","text":"<p>This function takes an executor id as input and deletes the corresponding executor.</p> <p>Parameters:</p> Name Type Description Default <code>be_id</code> <code>str</code> <p>The id of the executor to be deleted.</p> required Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_executor(be_id: str) -&gt; None:\n    \"\"\"\n    This function takes an executor id as input and deletes the corresponding executor.\n\n    Args:\n        be_id (str): The id of the executor to be deleted.\n    \"\"\"\n    BenchmarkExecutor.delete_executor(be_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_metric","title":"<code>api_delete_metric(met_id)</code>","text":"<p>Deletes a metric.</p> <p>This method takes a metric ID as input, deletes the corresponding JSON file from the directory specified by <code>EnvironmentVars.METRICS</code>. If the operation fails for any reason, an exception is raised and the error is printed.</p> <p>Parameters:</p> Name Type Description Default <code>met_id</code> <code>str</code> <p>The ID of the metric to delete.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error during file deletion or any other operation within the method.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_metric(met_id: str) -&gt; None:\n    \"\"\"\n    Deletes a metric.\n\n    This method takes a metric ID as input, deletes the corresponding JSON file from the directory specified by\n    `EnvironmentVars.METRICS`. If the operation fails for any reason, an exception is raised and the\n    error is printed.\n\n    Args:\n        met_id (str): The ID of the metric to delete.\n\n    Raises:\n        Exception: If there is an error during file deletion or any other operation within the method.\n    \"\"\"\n    Metric.delete_metric(met_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_recipe","title":"<code>api_delete_recipe(rec_id)</code>","text":"<p>Deletes a recipe.</p> <p>This method takes a recipe ID as input, deletes the corresponding JSON file from the directory specified by <code>EnvironmentVars.RECIPES</code>. If the operation fails for any reason, an exception is raised and the error is printed.</p> <p>Parameters:</p> Name Type Description Default <code>rec_id</code> <code>str</code> <p>The ID of the recipe to delete.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error during file deletion or any other operation within the method.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_recipe(rec_id: str) -&gt; None:\n    \"\"\"\n    Deletes a recipe.\n\n    This method takes a recipe ID as input, deletes the corresponding JSON file from the directory specified by\n    `EnvironmentVars.RECIPES`. If the operation fails for any reason, an exception is raised and the\n    error is printed.\n\n    Args:\n        rec_id (str): The ID of the recipe to delete.\n\n    Raises:\n        Exception: If there is an error during file deletion or any other operation within the method.\n    \"\"\"\n    Recipe.delete_recipe(rec_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_result","title":"<code>api_delete_result(res_id)</code>","text":"<p>This function takes a result id as input and deletes the corresponding result.</p> <p>Parameters:</p> Name Type Description Default <code>res_id</code> <code>str</code> <p>The id of the result to be deleted.</p> required Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_result(res_id: str) -&gt; None:\n    \"\"\"\n    This function takes a result id as input and deletes the corresponding result.\n\n    Args:\n        res_id (str): The id of the result to be deleted.\n    \"\"\"\n    Result.delete_result(res_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_delete_session","title":"<code>api_delete_session(session_id)</code>","text":"<p>Deletes a session based on the provided session ID.</p> <p>This API endpoint wraps around the <code>SessionManager.delete_session</code> method, offering a straightforward way to remove a session from the system using its unique identifier. It is particularly useful for cleaning up sessions that are no longer needed or for managing session lifecycles in a dynamic environment.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier of the session to be deleted.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return a value, but it will remove the specified session from the system.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_delete_session(session_id: str) -&gt; None:\n    \"\"\"\n    Deletes a session based on the provided session ID.\n\n    This API endpoint wraps around the `SessionManager.delete_session` method, offering a straightforward way to remove\n    a session from the system using its unique identifier. It is particularly useful for cleaning up sessions that are\n    no longer needed or for managing session lifecycles in a dynamic environment.\n\n    Args:\n        session_id (str): The unique identifier of the session to be deleted.\n\n    Returns:\n        None: This method does not return a value, but it will remove the specified session from the system.\n    \"\"\"\n    SessionManager.delete_session(session_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_connectors","title":"<code>api_get_all_connectors()</code>","text":"<p>Retrieves a list of all available connectors.</p> <p>This function calls the ConnectorManager's get_available_connectors method to retrieve a list of all available connectors. It returns a list of connector names, which are the names of Python files in the specified directory excluding any special or private files (denoted by \"__\" in their names).</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of the names of available connectors.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_connectors() -&gt; list[str]:\n    \"\"\"\n    Retrieves a list of all available connectors.\n\n    This function calls the ConnectorManager's get_available_connectors method to retrieve a list of all available\n    connectors. It returns a list of connector names, which are the names of Python files in the specified directory\n    excluding any special or private files (denoted by \"__\" in their names).\n\n    Returns:\n        list[str]: A list of the names of available connectors.\n    \"\"\"\n    return ConnectorManager.get_available_connectors()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_context_strategy_names","title":"<code>api_get_all_context_strategy_names()</code>","text":"<p>Retrieves and returns the names of all context strategies currently available.</p> <p>This API endpoint interfaces with the <code>ContextStrategyManager.get_all_context_strategy_names</code> method to fetch a list of all context strategy names. It's designed for clients that need to know what context strategies are available for use in sessions or other components of the system.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings, each representing the name of a context strategy.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_context_strategy_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves and returns the names of all context strategies currently available.\n\n    This API endpoint interfaces with the `ContextStrategyManager.get_all_context_strategy_names` method to fetch a list\n    of all context strategy names. It's designed for clients that need to know what context strategies are available for\n    use in sessions or other components of the system.\n\n    Returns:\n        list[str]: A list of strings, each representing the name of a context strategy.\n    \"\"\"\n    return ContextStrategyManager.get_all_context_strategy_names()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_cookbooks","title":"<code>api_get_all_cookbooks()</code>","text":"<p>Retrieves all available cookbooks.</p> <p>This function calls the <code>get_available_cookbooks</code> method of the <code>Cookbook</code> class, which returns a tuple containing a list of cookbook IDs and a list of <code>CookbookArguments</code> objects. The function then returns a list of dictionaries, each representing a cookbook.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a cookbook.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_cookbooks() -&gt; list[dict]:\n    \"\"\"\n    Retrieves all available cookbooks.\n\n    This function calls the `get_available_cookbooks` method of the `Cookbook` class, which returns a tuple\n    containing a list of cookbook IDs and a list of `CookbookArguments` objects. The function then returns a list\n    of dictionaries, each representing a cookbook.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a cookbook.\n    \"\"\"\n    _, cookbooks = Cookbook.get_available_cookbooks()\n    return [cookbook.to_dict() for cookbook in cookbooks]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_cookbooks_names","title":"<code>api_get_all_cookbooks_names()</code>","text":"<p>Retrieves the names of all available cookbooks.</p> <p>This function calls the <code>get_available_cookbooks</code> method of the <code>Cookbook</code> class, which returns a tuple containing a list of cookbook IDs and a list of <code>CookbookArguments</code> objects. The function then returns the list of cookbook IDs, which are the names of the cookbooks.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of cookbook names.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_cookbooks_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves the names of all available cookbooks.\n\n    This function calls the `get_available_cookbooks` method of the `Cookbook` class, which returns a tuple\n    containing a list of cookbook IDs and a list of `CookbookArguments` objects. The function then returns the\n    list of cookbook IDs, which are the names of the cookbooks.\n\n    Returns:\n        list[str]: A list of cookbook names.\n    \"\"\"\n    cookbooks_names, _ = Cookbook.get_available_cookbooks()\n    return cookbooks_names\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_endpoints","title":"<code>api_get_all_endpoints()</code>","text":"<p>Retrieves a list of all available endpoints.</p> <p>This function calls the ConnectorManager's get_available_endpoints method to retrieve a list of all available endpoints and their details. It then converts each ConnectorEndpointArguments object into a dictionary for easier consumption by the caller.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing an endpoint's details.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_endpoints() -&gt; list[dict]:\n    \"\"\"\n    Retrieves a list of all available endpoints.\n\n    This function calls the ConnectorManager's get_available_endpoints method to retrieve a list of all available\n    endpoints and their details. It then converts each ConnectorEndpointArguments object into a dictionary for easier\n    consumption by the caller.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing an endpoint's details.\n    \"\"\"\n    _, endpoints = ConnectorManager.get_available_endpoints()\n    return [endpoint.to_dict() for endpoint in endpoints]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_endpoints_names","title":"<code>api_get_all_endpoints_names()</code>","text":"<p>Retrieves a list of all endpoint names.</p> <p>This function calls the ConnectorManager's get_available_endpoints method to retrieve a list of all available endpoint names. It extracts the names from the tuple returned by get_available_endpoints, which contains a list of endpoint names and a list of ConnectorEndpointArguments objects.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of endpoint names.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_endpoints_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves a list of all endpoint names.\n\n    This function calls the ConnectorManager's get_available_endpoints method to retrieve a list of all available\n    endpoint names. It extracts the names from the tuple returned by get_available_endpoints, which contains a list\n    of endpoint names and a list of ConnectorEndpointArguments objects.\n\n    Returns:\n        list[str]: A list of endpoint names.\n    \"\"\"\n    endpoints_names, _ = ConnectorManager.get_available_endpoints()\n    return endpoints_names\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_executors","title":"<code>api_get_all_executors()</code>","text":"<p>This function retrieves all available executors and returns them as a list of dictionaries. Each dictionary represents an executor and contains its information.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing an executor.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_executors() -&gt; list[dict]:\n    \"\"\"\n    This function retrieves all available executors and returns them as a list of dictionaries. Each dictionary\n    represents an executor and contains its information.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing an executor.\n    \"\"\"\n    _, executors = BenchmarkExecutor.get_available_executors()\n    return [executor.to_dict() for executor in executors]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_executors_names","title":"<code>api_get_all_executors_names()</code>","text":"<p>This function retrieves all available executor names and returns them as a list.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of executor names.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_executors_names() -&gt; list[str]:\n    \"\"\"\n    This function retrieves all available executor names and returns them as a list.\n\n    Returns:\n        list[str]: A list of executor names.\n    \"\"\"\n    executors_names, _ = BenchmarkExecutor.get_available_executors()\n    return executors_names\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_metrics","title":"<code>api_get_all_metrics()</code>","text":"<p>Retrieves all available metrics.</p> <p>This function calls the get_available_metrics method to retrieve all available metrics. It then returns a list of these metrics.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings, each representing a metric.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_metrics() -&gt; list[str]:\n    \"\"\"\n    Retrieves all available metrics.\n\n    This function calls the get_available_metrics method to retrieve all available metrics.\n    It then returns a list of these metrics.\n\n    Returns:\n        list[str]: A list of strings, each representing a metric.\n    \"\"\"\n    return Metric.get_available_metrics()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_prompt_template_details","title":"<code>api_get_all_prompt_template_details()</code>","text":"<p>Retrieves all available prompt template details and returns them as a list of dictionaries.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing the details of a prompt template.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_prompt_template_details() -&gt; list[dict]:\n    \"\"\"\n    Retrieves all available prompt template details and returns them as a list of dictionaries.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing the details of a prompt template.\n    \"\"\"\n    return PromptTemplateManager.get_all_prompt_template_details()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_prompt_template_names","title":"<code>api_get_all_prompt_template_names()</code>","text":"<p>Retrieves all available prompt template names and returns them as a list.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of prompt template names.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_prompt_template_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves all available prompt template names and returns them as a list.\n\n    Returns:\n        list[str]: A list of prompt template names.\n    \"\"\"\n    return PromptTemplateManager.get_all_prompt_template_names()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_recipes","title":"<code>api_get_all_recipes()</code>","text":"<p>Retrieves all available recipes.</p> <p>This function calls the get_available_recipes method to retrieve all available recipes. It then converts each recipe into a dictionary using the to_dict method and returns a list of these dictionaries.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a recipe.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_recipes() -&gt; list[dict]:\n    \"\"\"\n    Retrieves all available recipes.\n\n    This function calls the get_available_recipes method to retrieve all available recipes. It then converts each\n    recipe into a dictionary using the to_dict method and returns a list of these dictionaries.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a recipe.\n    \"\"\"\n    _, recipes = Recipe.get_available_recipes()\n    return [recipe.to_dict() for recipe in recipes]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_recipes_names","title":"<code>api_get_all_recipes_names()</code>","text":"<p>Retrieves all available recipe names.</p> <p>This function calls the get_available_recipes method to retrieve all available recipes. It then extracts the names of each recipe and returns a list of these names.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings, each representing a recipe name.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_recipes_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves all available recipe names.\n\n    This function calls the get_available_recipes method to retrieve all available recipes. It then extracts the names\n    of each recipe and returns a list of these names.\n\n    Returns:\n        list[str]: A list of strings, each representing a recipe name.\n    \"\"\"\n    recipes_names, _ = Recipe.get_available_recipes()\n    return recipes_names\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_results","title":"<code>api_get_all_results()</code>","text":"<p>This function retrieves all available results and returns them as a list of dictionaries. Each dictionary represents a result and contains its information.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a result.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_results() -&gt; list[dict]:\n    \"\"\"\n    This function retrieves all available results and returns them as a list of dictionaries. Each dictionary\n    represents a result and contains its information.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a result.\n    \"\"\"\n    _, results = Result.get_available_results()\n    return [result.to_dict() for result in results]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_results_name","title":"<code>api_get_all_results_name()</code>","text":"<p>This function retrieves all available result names and returns them as a list.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of result names.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_results_name() -&gt; list[str]:\n    \"\"\"\n    This function retrieves all available result names and returns them as a list.\n\n    Returns:\n        list[str]: A list of result names.\n    \"\"\"\n    results_name, _ = Result.get_available_results()\n    return results_name\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_session_details","title":"<code>api_get_all_session_details()</code>","text":"<p>Retrieves and returns detailed metadata for all sessions currently managed.</p> <p>This API endpoint leverages the <code>SessionManager.get_all_session_details</code> method to obtain metadata for all sessions. It then converts each session's metadata into a dictionary format for easy consumption by clients. This method is particularly useful for clients that require comprehensive details about each session, including names, descriptions, endpoints, and other relevant metadata.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing the detailed metadata of a session.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_session_details() -&gt; list[dict]:\n    \"\"\"\n    Retrieves and returns detailed metadata for all sessions currently managed.\n\n    This API endpoint leverages the `SessionManager.get_all_session_details` method to obtain metadata for all sessions.\n    It then converts each session's metadata into a dictionary format for easy consumption by clients. This method\n    is particularly useful for clients that require comprehensive details about each session, including names,\n    descriptions, endpoints, and other relevant metadata.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing the detailed metadata of a session.\n    \"\"\"\n\n    return [\n        session_metadata.to_dict()\n        for session_metadata in SessionManager.get_all_session_details()\n    ]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_all_session_names","title":"<code>api_get_all_session_names()</code>","text":"<p>Retrieves and returns the names (IDs) of all sessions currently managed.</p> <p>This API endpoint wraps around the <code>SessionManager.get_all_session_names</code> method, providing an interface to fetch a list of all session names (or IDs). It's useful for clients needing to enumerate all sessions without requiring the details of each session.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings, each representing the unique name (ID) of a session.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_all_session_names() -&gt; list[str]:\n    \"\"\"\n    Retrieves and returns the names (IDs) of all sessions currently managed.\n\n    This API endpoint wraps around the `SessionManager.get_all_session_names` method, providing an interface\n    to fetch a list of all session names (or IDs). It's useful for clients needing to enumerate all sessions\n    without requiring the details of each session.\n\n    Returns:\n        list[str]: A list of strings, each representing the unique name (ID) of a session.\n    \"\"\"\n    return SessionManager.get_all_session_names()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_session","title":"<code>api_get_session(session_id)</code>","text":"<p>Retrieves and returns a session object based on the provided session ID.</p> <p>This API endpoint fetches a session object identified by the session ID and returns it to the caller. It is useful for obtaining detailed information about a specific session within the system.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier of the session to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Session</code> <code>Session</code> <p>The session object associated with the specified session ID.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_session(session_id: str) -&gt; Session:\n    \"\"\"\n    Retrieves and returns a session object based on the provided session ID.\n\n    This API endpoint fetches a session object identified by the session ID and returns it to the caller.\n    It is useful for obtaining detailed information about a specific session within the system.\n\n    Args:\n        session_id (str): The unique identifier of the session to retrieve.\n\n    Returns:\n        Session: The session object associated with the specified session ID.\n    \"\"\"\n    return Session(session_id=session_id)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_get_session_chats_by_session_id","title":"<code>api_get_session_chats_by_session_id(session_id)</code>","text":"<p>Retrieves and returns the chat sessions associated with a specific session ID as a list of dictionaries.</p> <p>This API endpoint calls the <code>SessionManager.get_session_chats_by_session_id</code> method to fetch all chat sessions related to the specified session ID. Each chat session object is then converted to a dictionary for easy JSON serialization and client consumption. This is particularly useful for clients that need to display or process the details of chat sessions within a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier for the session whose chat sessions are to be retrieved.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a chat session associated with the specified session ID.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_get_session_chats_by_session_id(session_id: str) -&gt; list[dict]:\n    \"\"\"\n    Retrieves and returns the chat sessions associated with a specific session ID as a list of dictionaries.\n\n    This API endpoint calls the `SessionManager.get_session_chats_by_session_id` method to fetch all chat sessions\n    related to the specified session ID. Each chat session object is then converted to a dictionary for easy JSON\n    serialization and client consumption. This is particularly useful for clients that need to display or process\n    the details of chat sessions within a specific session.\n\n    Args:\n        session_id (str): The unique identifier for the session whose chat sessions are to be retrieved.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a chat session associated with the specified session ID.\n    \"\"\"\n    return [\n        chat_object.to_dict()\n        for chat_object in SessionManager.get_session_chats_by_session_id(session_id)\n    ]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_load_executor","title":"<code>api_load_executor(be_id, progress_callback_func=None)</code>","text":"<p>Loads an existing executor.</p> <p>This function takes an executor ID and an optional progress callback function as input. It checks if the executor's database file exists. If it does not, it raises an error. If the file does exist, it creates a connection to the database and reads the executor's information from the database. It then creates a new BenchmarkExecutor instance with the read information and the provided progress callback function, and returns this instance.</p> <p>Parameters:</p> Name Type Description Default <code>be_id</code> <code>str</code> <p>The ID of the executor to load.</p> required <code>progress_callback_func</code> <code>Union[Callable, None]</code> <p>An optional progress callback function for the executor.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BenchmarkExecutor</code> <code>BenchmarkExecutor</code> <p>The loaded executor.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the executor's database file does not exist.</p> <code>Exception</code> <p>If there is an error during the loading process.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_load_executor(\n    be_id: str, progress_callback_func: Union[Callable, None] = None\n) -&gt; BenchmarkExecutor:\n    \"\"\"\n    Loads an existing executor.\n\n    This function takes an executor ID and an optional progress callback function as input.\n    It checks if the executor's database file exists. If it does not, it raises an error.\n    If the file does exist, it creates a connection to the database and reads the executor's\n    information from the database. It then creates a new BenchmarkExecutor instance with the\n    read information and the provided progress callback function, and returns this instance.\n\n    Args:\n        be_id (str): The ID of the executor to load.\n        progress_callback_func (Union[Callable, None]): An optional progress callback function for the executor.\n\n    Returns:\n        BenchmarkExecutor: The loaded executor.\n\n    Raises:\n        RuntimeError: If the executor's database file does not exist.\n        Exception: If there is an error during the loading process.\n    \"\"\"\n    return BenchmarkExecutor.load_executor(be_id, progress_callback_func)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_cookbook","title":"<code>api_read_cookbook(cb_id)</code>","text":"<p>Retrieves a cookbook based on the provided cookbook ID.</p> <p>This function reads a cookbook using the <code>read_cookbook</code> method of the <code>Cookbook</code> class, and converts the returned <code>Cookbook</code> object to a dictionary using its <code>to_dict</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>cb_id</code> <code>str</code> <p>A cookbook ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary representing a cookbook.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_cookbook(cb_id: str) -&gt; dict:\n    \"\"\"\n    Retrieves a cookbook based on the provided cookbook ID.\n\n    This function reads a cookbook using the `read_cookbook` method\n    of the `Cookbook` class, and converts the returned `Cookbook` object to a dictionary using its `to_dict` method.\n\n    Args:\n        cb_id (str): A cookbook ID.\n\n    Returns:\n        dict: A dictionary representing a cookbook.\n    \"\"\"\n    return Cookbook.read_cookbook(cb_id).to_dict()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_cookbooks","title":"<code>api_read_cookbooks(cb_ids)</code>","text":"<p>Retrieves a list of cookbooks based on the provided list of cookbook IDs.</p> <p>This function iterates over the list of cookbook IDs, reads each cookbook using the <code>read_cookbook</code> method of the <code>Cookbook</code> class, and converts the returned <code>Cookbook</code> object to a dictionary using its <code>to_dict</code> method. It returns a list of these dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>cb_ids</code> <code>list[str]</code> <p>A list of cookbook IDs.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a cookbook.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_cookbooks(cb_ids: list[str]) -&gt; list[dict]:\n    \"\"\"\n    Retrieves a list of cookbooks based on the provided list of cookbook IDs.\n\n    This function iterates over the list of cookbook IDs, reads each cookbook using the `read_cookbook` method\n    of the `Cookbook` class, and converts the returned `Cookbook` object to a dictionary using its `to_dict` method.\n    It returns a list of these dictionaries.\n\n    Args:\n        cb_ids (list[str]): A list of cookbook IDs.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a cookbook.\n    \"\"\"\n    return [Cookbook.read_cookbook(cb_id).to_dict() for cb_id in cb_ids]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_endpoint","title":"<code>api_read_endpoint(ep_id)</code>","text":"<p>Reads an endpoint from the connector manager.</p> <p>This function reads an endpoint from the connector manager using the provided endpoint ID.</p> <p>Parameters:</p> Name Type Description Default <code>ep_id</code> <code>str</code> <p>The ID of the endpoint to read.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the endpoint information.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_endpoint(ep_id: str) -&gt; dict:\n    \"\"\"\n    Reads an endpoint from the connector manager.\n\n    This function reads an endpoint from the connector manager using the provided endpoint ID.\n\n    Args:\n        ep_id (str): The ID of the endpoint to read.\n\n    Returns:\n        dict: A dictionary containing the endpoint information.\n    \"\"\"\n    return ConnectorManager.read_endpoint(ep_id).to_dict()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_executor","title":"<code>api_read_executor(be_id)</code>","text":"<p>Reads an executor and returns its information.</p> <p>This function takes an executor ID as input, reads the corresponding database file from the storage manager, and returns a dictionary containing the executor's information.</p> <p>Parameters:</p> Name Type Description Default <code>be_id</code> <code>str</code> <p>The ID of the executor.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the executor's information.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_executor(be_id: str) -&gt; dict:\n    \"\"\"\n    Reads an executor and returns its information.\n\n    This function takes an executor ID as input, reads the corresponding database file from the storage manager,\n    and returns a dictionary containing the executor's information.\n\n    Args:\n        be_id (str): The ID of the executor.\n\n    Returns:\n        dict: A dictionary containing the executor's information.\n    \"\"\"\n    return BenchmarkExecutor.read_executor_arguments(be_id).to_dict()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_recipe","title":"<code>api_read_recipe(rec_id)</code>","text":"<p>Reads a recipe and returns its information.</p> <p>This function takes a recipe ID as input, reads the corresponding recipe, and returns a dictionary containing the recipe's information.</p> <p>Parameters:</p> Name Type Description Default <code>rec_id</code> <code>str</code> <p>The ID of the recipe.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the recipe's information.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_recipe(rec_id: str) -&gt; dict:\n    \"\"\"\n    Reads a recipe and returns its information.\n\n    This function takes a recipe ID as input, reads the corresponding recipe,\n    and returns a dictionary containing the recipe's information.\n\n    Args:\n        rec_id (str): The ID of the recipe.\n\n    Returns:\n        dict: A dictionary containing the recipe's information.\n    \"\"\"\n    return Recipe.read_recipe(rec_id).to_dict()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_recipes","title":"<code>api_read_recipes(rec_ids)</code>","text":"<p>Reads multiple recipes and returns their information.</p> <p>This function takes a list of recipe IDs as input, reads the corresponding recipes, and returns a list of dictionaries containing each recipe's information.</p> <p>Parameters:</p> Name Type Description Default <code>rec_ids</code> <code>list[str]</code> <p>The IDs of the recipes.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each containing a recipe's information.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_recipes(rec_ids: list[str]) -&gt; list[dict]:\n    \"\"\"\n    Reads multiple recipes and returns their information.\n\n    This function takes a list of recipe IDs as input, reads the corresponding recipes,\n    and returns a list of dictionaries containing each recipe's information.\n\n    Args:\n        rec_ids (list[str]): The IDs of the recipes.\n\n    Returns:\n        list[dict]: A list of dictionaries, each containing a recipe's information.\n    \"\"\"\n    # This function uses list comprehension to iterate over the list of recipe IDs,\n    # calling the read_recipe method for each ID and converting the result to a dictionary.\n    # The resulting list of dictionaries is then returned.\n    return [Recipe.read_recipe(rec_id).to_dict() for rec_id in rec_ids]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_result","title":"<code>api_read_result(res_id)</code>","text":"<p>Reads a result and returns its information.</p> <p>This function takes a result ID as input, reads the corresponding database file from the storage manager, and returns a dictionary containing the result's information.</p> <p>Parameters:</p> Name Type Description Default <code>res_id</code> <code>str</code> <p>The ID of the result.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the result's information.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_result(res_id: str) -&gt; dict:\n    \"\"\"\n    Reads a result and returns its information.\n\n    This function takes a result ID as input, reads the corresponding database file from the storage manager,\n    and returns a dictionary containing the result's information.\n\n    Args:\n        res_id (str): The ID of the result.\n\n    Returns:\n        dict: A dictionary containing the result's information.\n    \"\"\"\n    return Result.read_result(res_id).to_dict()\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_read_results","title":"<code>api_read_results(res_ids)</code>","text":"<p>This function takes a list of result ids as input and reads the corresponding results.</p> <p>Parameters:</p> Name Type Description Default <code>res_ids</code> <code>list[str]</code> <p>The list of ids of the results to be read.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, each representing a result.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_read_results(res_ids: list[str]) -&gt; list[dict]:\n    \"\"\"\n    This function takes a list of result ids as input and reads the corresponding results.\n\n    Args:\n        res_ids (list[str]): The list of ids of the results to be read.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing a result.\n    \"\"\"\n    return [Result.read_result(res_id).to_dict() for res_id in res_ids]\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_send_prompt","title":"<code>api_send_prompt(session_id, user_prompt)</code>","text":"<p>Sends a user-defined prompt to a specific session.</p> <p>This API endpoint allows for sending a prompt, defined by the user, to a session identified by the session ID. It leverages the <code>SessionManager.send_prompt</code> method to facilitate the interaction between the user and the session, enabling dynamic input and further customization of the session's behavior based on user input.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier of the session to which the prompt is to be sent.</p> required <code>user_prompt</code> <code>str</code> <p>The prompt text defined by the user to be sent to the session.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return a value but triggers the sending of the user prompt to the specified session.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_send_prompt(session_id: str, user_prompt: str) -&gt; None:\n    \"\"\"\n    Sends a user-defined prompt to a specific session.\n\n    This API endpoint allows for sending a prompt, defined by the user, to a session identified by the session ID.\n    It leverages the `SessionManager.send_prompt` method to facilitate the interaction between the user and the session,\n    enabling dynamic input and further customization of the session's behavior based on user input.\n\n    Args:\n        session_id (str): The unique identifier of the session to which the prompt is to be sent.\n        user_prompt (str): The prompt text defined by the user to be sent to the session.\n\n    Returns:\n        None: This method does not return a value but triggers the sending of the user prompt to the specified session.\n    \"\"\"\n    SessionManager.send_prompt(session_id, user_prompt)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_set_environment_variables","title":"<code>api_set_environment_variables(env_vars)</code>","text":"<p>Sets the environment variables for the current session.</p> <p>Parameters:</p> Name Type Description Default <code>env_vars</code> <code>dict</code> <p>A dictionary containing the environment variables to set.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_set_environment_variables(env_vars: dict) -&gt; None:\n    \"\"\"\n    Sets the environment variables for the current session.\n\n    Args:\n        env_vars (dict): A dictionary containing the environment variables to set.\n\n    Returns:\n        None\n    \"\"\"\n    pass\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_update_context_strategy","title":"<code>api_update_context_strategy(session_id, context_strategy_name)</code>","text":"<p>Updates the context strategy for a specific session.</p> <p>This API endpoint calls the <code>SessionManager.update_context_strategy</code> method to update the context strategy associated with the specified session ID. It allows clients to modify the context strategy for a session, enabling dynamic changes in how context is managed within the session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier of the session for which the context strategy is to be updated.</p> required <code>context_strategy_name</code> <code>str</code> <p>The new context strategy name to be assigned to the session.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return a value but updates the context strategy for the specified session.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_update_context_strategy(session_id: str, context_strategy_name: str) -&gt; None:\n    \"\"\"\n    Updates the context strategy for a specific session.\n\n    This API endpoint calls the `SessionManager.update_context_strategy` method to update the context strategy\n    associated with the specified session ID. It allows clients to modify the context strategy for a session,\n    enabling dynamic changes in how context is managed within the session.\n\n    Args:\n        session_id (str): The unique identifier of the session for which the context strategy is to be updated.\n        context_strategy_name (str): The new context strategy name to be assigned to the session.\n\n    Returns:\n        None: This method does not return a value but updates the context strategy for the specified session.\n    \"\"\"\n    SessionManager.update_context_strategy(session_id, context_strategy_name)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_update_cookbook","title":"<code>api_update_cookbook(cb_id, **kwargs)</code>","text":"<p>Updates an existing cookbook in the cookbook manager.</p> <p>This function updates an existing cookbook in the cookbook manager using the provided cookbook details. It first checks if the cookbook exists, then updates the fields of the existing cookbook with the provided kwargs, and finally calls the Cookbook's update_cookbook method to update the cookbook.</p> <p>Parameters:</p> Name Type Description Default <code>cb_id</code> <code>str</code> <p>The ID of the cookbook to update.</p> required <code>kwargs</code> <p>A dictionary of arguments for the cookbook. Possible keys are: name (str): The name of the cookbook. description (str): The description of the cookbook. recipes (list[str]): The list of recipes in the cookbook.</p> <code>{}</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the cookbook with the provided ID does not exist.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_update_cookbook(cb_id: str, **kwargs) -&gt; None:\n    \"\"\"\n    Updates an existing cookbook in the cookbook manager.\n\n    This function updates an existing cookbook in the cookbook manager using the provided cookbook details.\n    It first checks if the cookbook exists, then updates the fields of the existing cookbook with the provided kwargs,\n    and finally calls the Cookbook's update_cookbook method to update the cookbook.\n\n    Args:\n        cb_id (str): The ID of the cookbook to update.\n        kwargs: A dictionary of arguments for the cookbook. Possible keys are:\n            name (str): The name of the cookbook.\n            description (str): The description of the cookbook.\n            recipes (list[str]): The list of recipes in the cookbook.\n\n    Raises:\n        RuntimeError: If the cookbook with the provided ID does not exist.\n\n    Returns:\n        None\n    \"\"\"\n    # Check if the cookbook exists\n    try:\n        existing_cookbook = Cookbook.read_cookbook(cb_id)\n    except Exception:\n        raise RuntimeError(f\"Cookbook with ID '{cb_id}' does not exist\")\n\n    # Update the fields of the existing cookbook with the provided kwargs\n    for key, value in kwargs.items():\n        if hasattr(existing_cookbook, key):\n            setattr(existing_cookbook, key, value)\n\n    # Update the cookbook\n    Cookbook.update_cookbook(existing_cookbook)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_update_endpoint","title":"<code>api_update_endpoint(ep_id, **kwargs)</code>","text":"<p>Updates an existing endpoint in the connector manager.</p> <p>This function updates an existing endpoint in the connector manager using the provided endpoint details. It first creates a ConnectorEndpointArguments instance with the provided details, then calls the ConnectorManager's update_endpoint method to update the endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>A dictionary of arguments for the endpoint. Possible keys are: name (str): The name of the endpoint. connector_type (str): The type of the connector. uri (str): The URI for the connector. token (str): The token for the connector. max_calls_per_second (int): The maximum number of API calls allowed per second. max_concurrency (int): The maximum number of concurrent API calls. params (dict): Additional parameters for the connector.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_update_endpoint(ep_id: str, **kwargs) -&gt; None:\n    \"\"\"\n    Updates an existing endpoint in the connector manager.\n\n    This function updates an existing endpoint in the connector manager using the provided endpoint details.\n    It first creates a ConnectorEndpointArguments instance with the provided details, then calls the\n    ConnectorManager's update_endpoint method to update the endpoint.\n\n    Args:\n        kwargs: A dictionary of arguments for the endpoint. Possible keys are:\n            name (str): The name of the endpoint.\n            connector_type (str): The type of the connector.\n            uri (str): The URI for the connector.\n            token (str): The token for the connector.\n            max_calls_per_second (int): The maximum number of API calls allowed per second.\n            max_concurrency (int): The maximum number of concurrent API calls.\n            params (dict): Additional parameters for the connector.\n\n    Returns:\n        None\n    \"\"\"\n    # Check if the endpoint exists\n    try:\n        existing_endpoint = ConnectorManager.read_endpoint(ep_id)\n    except Exception:\n        raise RuntimeError(f\"Endpoint with ID '{ep_id}' does not exist\")\n\n    # Update the fields of the existing endpoint with the provided kwargs\n    for key, value in kwargs.items():\n        if hasattr(existing_endpoint, key):\n            setattr(existing_endpoint, key, value)\n\n    # Update the endpoint\n    ConnectorManager.update_endpoint(existing_endpoint)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_update_prompt_template","title":"<code>api_update_prompt_template(session_id, prompt_template_name)</code>","text":"<p>Updates the prompt template for a specific session.</p> <p>This API endpoint calls the <code>SessionManager.update_prompt_template</code> method to update the prompt template associated with the specified session ID. It allows clients to modify the prompt template for a session, enabling dynamic changes in the prompts generated within the session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The unique identifier of the session for which the prompt template is to be updated.</p> required <code>prompt_template_name</code> <code>str</code> <p>The new prompt template name to be assigned to the session.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return a value but updates the prompt template for the specified session.</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_update_prompt_template(session_id: str, prompt_template_name: str) -&gt; None:\n    \"\"\"\n    Updates the prompt template for a specific session.\n\n    This API endpoint calls the `SessionManager.update_prompt_template` method to update the prompt template\n    associated with the specified session ID. It allows clients to modify the prompt template for a session,\n    enabling dynamic changes in the prompts generated within the session.\n\n    Args:\n        session_id (str): The unique identifier of the session for which the prompt template is to be updated.\n        prompt_template_name (str): The new prompt template name to be assigned to the session.\n\n    Returns:\n        None: This method does not return a value but updates the prompt template for the specified session.\n    \"\"\"\n    SessionManager.update_prompt_template(session_id, prompt_template_name)\n</code></pre>"},{"location":"understanding_moonshot/api/#moonshot.api.api_update_recipe","title":"<code>api_update_recipe(rec_id, **kwargs)</code>","text":"<p>Updates an existing recipe in the recipe manager.</p> <p>This function updates an existing recipe in the recipe manager using the provided recipe details. It first checks if the recipe exists, then updates the fields of the existing recipe with the provided kwargs, and finally calls the Recipe's update_recipe method to update the recipe.</p> <p>Parameters:</p> Name Type Description Default <code>rec_id</code> <code>str</code> <p>The ID of the recipe to update.</p> required <code>kwargs</code> <p>A dictionary of arguments for the recipe. Possible keys are: name (str): The name of the recipe. description (str): The description of the recipe. tags (list[str]): The tags associated with the recipe. datasets (list[str]): The datasets used in the recipe. prompt_templates (list[str]): The prompt templates used in the recipe. metrics (list[str]): The metrics used in the recipe.</p> <code>{}</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the recipe with the provided ID does not exist.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>moonshot/api.py</code> <pre><code>def api_update_recipe(rec_id: str, **kwargs) -&gt; None:\n    \"\"\"\n    Updates an existing recipe in the recipe manager.\n\n    This function updates an existing recipe in the recipe manager using the provided recipe details.\n    It first checks if the recipe exists, then updates the fields of the existing recipe with the provided kwargs,\n    and finally calls the Recipe's update_recipe method to update the recipe.\n\n    Args:\n        rec_id (str): The ID of the recipe to update.\n        kwargs: A dictionary of arguments for the recipe. Possible keys are:\n            name (str): The name of the recipe.\n            description (str): The description of the recipe.\n            tags (list[str]): The tags associated with the recipe.\n            datasets (list[str]): The datasets used in the recipe.\n            prompt_templates (list[str]): The prompt templates used in the recipe.\n            metrics (list[str]): The metrics used in the recipe.\n\n    Raises:\n        RuntimeError: If the recipe with the provided ID does not exist.\n\n    Returns:\n        None\n    \"\"\"\n    # Check if the recipe exists\n    try:\n        existing_recipe = Recipe.read_recipe(rec_id)\n    except Exception:\n        raise RuntimeError(f\"Recipe with ID '{rec_id}' does not exist\")\n\n    # Update the fields of the existing recipe with the provided kwargs\n    for key, value in kwargs.items():\n        if hasattr(existing_recipe, key):\n            setattr(existing_recipe, key, value)\n\n    # Update the endpoint\n    Recipe.update_recipe(existing_recipe)\n</code></pre>"},{"location":"web_api/connector_endpoints/","title":"Moonshot Connector API Endpoints","text":"[GET] /v1/connectors This endpoint is use to get all connectors.   Parameters (body) : None  Success Response:  <pre><code>[\n    \"hf-llama2-13b-gptq\",\n    \"openai-gpt4\",\n    \"claude2\",\n    \"openai-gpt35\",\n    \"openai-gpt35-turbo-16k\",\n    \"hf-gpt2\"\n]\n</code></pre>  [GET] /v1/llm_endpoints This endpoint is use to get all endpoints.   Parameters (body) : None  Success Response:  <pre><code>[\n    {\n        \"id\": \"openaigpt35turbotest2\",\n        \"connector_type\": \"openai-gpt35-turbo-16k\",\n        \"name\": \"openaigpt35TurboTest2\",\n        \"uri\": \"https://api.openai.com/v1/chat/completions\",\n        \"token\": \"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\",\n        \"max_calls_per_second\": 10,\n        \"max_concurrency\": 1,\n        \"params\": {\n            \"temperature\": 4\n        }\n    }\n]\n</code></pre> [POST] /v1/llm_endpoints This endpoint is use to create new endpoints.   Parameters (body):  <pre><code>{\n    \"name\": \"string\",\n    \"connector_type\": \"string\",\n    \"uri\": \"string\",\n    \"token\": \"string\",\n    \"max_calls_per_second\": \"int\",\n    \"max_concurrency\": \"int\",\n    \"params\": \"dict\"\n}\n</code></pre> Example <pre><code>{\n  \"name\": \"openaigpt35TurboTest2\",\n  \"connector_type\": \"openai-gpt35-turbo-16k\",\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"token\": \"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\",\n  \"max_calls_per_second\": 10,\n  \"max_concurrency\": 1,\n  \"params\": {\n    \"temperature\": 4\n  }\n}\n</code></pre> Success Response:  <pre><code>{\n    \"message\": \"Endpoint added successfully\"\n}\n</code></pre> [DELETE] /v1/llm_endpoints/{llm_endpoint_id} This endpoint is use to delete an existing endpoint.   Parameters (path) :<code>llm_endpoint_id</code>: The ID of the LLM endpoint to delete.  Example:  <code>/v1/llm_endpoints/openaigpt35TurboTest2</code> Success Response:  <pre><code>{\n    \"message\": \"Endpoint deleted successfully\"\n}\n</code></pre>"},{"location":"web_api/cookbook_endpoints/","title":"Moonshot Cookbook API Endpoints","text":"[GET] /v1/cookbooks This endpoint is use to get all cookbooks.   Parameters (body) : None  Success Response:  <pre><code>[\n    {\n        \"id\": \"leaderboard-cookbook\",\n        \"name\": \"Leaderboard Cookbook\",\n        \"description\": \"This cookbook, drawing inspiration from leaderboards like HF's OpenLLM and HELM, features popular benchmarks for testing model capabilities, with results that may vary from actual leaderboard standings.\",\n        \"recipes\": [\n            \"mmlu\",\n            \"truthfulqa-mcq\",\n            \"winogrande\",\n            \"hellaswag\",\n            \"arc-easy\",\n            \"arc-challenge\",\n            \"gsm8k\"\n        ]\n    },\n    {\n        \"id\": \"cbbq-amb-cookbook\",\n        \"name\": \"CBBQ (Ambiguous)\",\n        \"description\": \"This is a cookbook that consists all the ambiguous questions from CBBQ.\",\n        \"recipes\": [\n            \"cbbq-lite-educational-qualification-amb\",\n            \"cbbq-lite-disease-amb\",\n            \"cbbq-lite-ethnicity-amb\",\n            \"cbbq-lite-nationality-amb\",\n            \"cbbq-lite-gender-amb\",\n            \"cbbq-lite-physical-appearance-amb\",\n            \"cbbq-lite-region-amb\",\n            \"cbbq-lite-race-amb\",\n            \"cbbq-lite-age-amb\",\n            \"cbbq-lite-race-amb\",\n            \"cbbq-lite-race-amb\",\n            \"cbbq-lite-disability-amb\",\n            \"cbbq-lite-SES-amb\",\n        ]\n    }\n]\n</code></pre>  [GET] /v1/cookbooks/{cookbook_id}  This endpoint is use to cookbook details by ID.   Parameters (path) :<code>cookbook_id</code>: The ID of the cookbook to retrieve.  Example : <code>/v1/cookbooks/leaderboard-cookbook</code> Success Response:  <pre><code>{\n    \"id\": \"leaderboard-cookbook\",\n    \"name\": \"Leaderboard Cookbook\",\n    \"description\": \"This cookbook, drawing inspiration from leaderboards like HF's OpenLLM and HELM, features popular benchmarks for testing model capabilities, with results that may vary from actual leaderboard standings.\",\n    \"recipes\": [\n        \"mmlu\",\n        \"truthfulqa-mcq\",\n        \"winogrande\",\n        \"hellaswag\",\n        \"arc-easy\",\n        \"arc-challenge\",\n        \"gsm8k\"\n    ]\n}\n</code></pre> [POST] /v1/cookbooks This endpoint is use to create new cookbook.   Parameters (body) <pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"recipes\": [\"string\"]\n}\n</code></pre> Example <pre><code>{\n    \"name\": \"cookbook1\",\n    \"description\": \"Bogus cookbook\",\n    \"recipes\": [\"recipe1\",\"recipe2\"]\n}\n</code></pre> Success Response:  <pre><code>{\n    \"message\": \"Cookbook created successfully\"\n}\n</code></pre> [PUT] /v1/cookbooks/{cookbook_id}  This endpoint is use to update an existing cookbook.   Parameters (path) :<code>cookbook_id</code>: The ID of the cookbook to retrieve.   Parameters (body):  <pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"recipes\": [\"string\"]\n}\n\n- **Parameters (path)**\n    - `cookbook_id`: The ID of the cookbook to retrieve.\n- **Parameters (body)**\n```json\n{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"recipes\": [\"string\"]\n}\n</code></pre> Example <code>/v1/cookbooks/cookbook1</code> <pre><code>{\n    \"name\": \"cookbook1-A\",\n    \"description\": \"Bogus cookbook A\",\n    \"recipes\": [\"recipe1\",\"recipe2\"]\n}\n</code></pre> Success Response:  <pre><code>{\n    \"message\": \"Cookbook updated successfully\"\n}\n</code></pre>"},{"location":"web_api/prompt_template_endpoints/","title":"Moonshot Prompt Templates API Endpoints","text":"[GET] /v1/prompt_templates This endpoint is use to get all prompt templates.   Parameters (body) : None  Success Response:  <pre><code>[\n\n]\n</code></pre>"},{"location":"web_api/recipe_endpoints/","title":"Moonshot Recipe API Endpoints","text":"[GET] /v1/recipes This endpoint is use to get all recipes.   Parameters (body) : None  Success Response:  <pre><code>[\n    {\n        \"id\": \"squad-shifts-tnf\",\n        \"name\": \"squad-shifts-tnf\",\n        \"description\": \"Zero-shot reading comprehension on paragraphs and questions from squadshifts. Augmented to true/false statement.\",\n        \"tags\": [],\n        \"datasets\": [\n            \"squad-shifts-tnf\"\n        ],\n        \"prompt_templates\": [],\n        \"metrics\": [\n            \"relaxstrmatch\"\n        ]\n    },\n    {\n        \"id\": \"tamil-kural-classification\",\n        \"name\": \"TAMIL-KURAL-CLASSIFICATION\",\n        \"description\": \"This recipe is used to test the comprehension abilities for the Thirukkural. Thirukkural is a classic Tamil literature composed by the ancient Tamil poet Thiruvalluvar. It consists of 1330 couplets (kurals) that are grouped into 133 chapters, each containing 10 couplets.\",\n        \"tags\": [\n            \"tamil\",\n            \"text classification\"\n        ],\n        \"datasets\": [\n            \"tamil-kural-classification\"\n        ],\n        \"prompt_templates\": [\n            \"tamil-templatekuralclassification\"\n        ],\n        \"metrics\": [\n            \"exactstrmatch\"\n        ]\n    }\n]\n</code></pre> [POST] /v1/recipes This endpoint is use to create new recipe.   Parameters (body):  <pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"tags\": [\"string\"],\n    \"datasets\": [\"string\"],\n    \"prompt_templates\": [\"string\"],\n    \"metrics\": [\"string\"]\n}\n</code></pre> Example <pre><code>{\n    \"name\": \"Measuring Tape 2\",\n    \"description\": \"Test Recipe\",\n    \"tags\": [],\n    \"datasets\": [\n        \"winogrande\"\n    ],\n    \"prompt_templates\": [\n        \"question-answer-template1\"\n    ],\n    \"metrics\": [\n        \"exactstrmatch\"\n    ]\n}\n</code></pre> Success Response:  <pre><code>{\n    \"message\": \"Recipe created successfully\"\n}\n</code></pre> [DELETE] /v1/recipes/{recipe_id} This endpoint is use to delete an existing recipe.   Parameters (path) :<code>recipe_id</code>: The ID of the recipe to delete.  Example:  <code>/v1/recipe/sample-recipe</code> Success Response:  <pre><code>{\n    \"message\": \"Recipe deleted successfully\"\n}\n</code></pre>"},{"location":"web_api/sessions_endpoints/","title":"Moonshot Sessions API Endpoints","text":"[GET] /v1/sessions This endpoint is use to get all sessions.   Parameters (body) : None  Success Response:  <pre><code>[\n    {\n        \"session_id\": \"testsession1_20240315-043147\",\n        \"name\": \"TestSession1\",\n        \"description\": \"Test 1\",\n        \"created_epoch\": 1710448307.051328,\n        \"created_datetime\": \"20240315-043147\",\n        \"chat_ids\": [\n            \"openaigpt35turbotest1_20240315_043147\",\n            \"openaigpt4test1_20240315_043147\"\n        ],\n        \"endpoints\": [\n            \"openaigpt35turbotest1\",\n            \"openaigpt4test1\"\n        ],\n        \"prompt_template\": null,\n        \"context_strategy\": null,\n        \"filename\": null,\n        \"chat_history\": null\n    }\n]\n</code></pre>  [GET] /v1/sessions/{session_id}?include_history={boolean}&amp;length={int}  This endpoint is use to session details by ID.   Parameters (path):  <code>session_id</code>: The ID of the session to retrieve.  <code>include_history</code>: A boolean to determine if you want to retrieve the history  <code>length</code>: The length of the history you want to retrieve  Example : <code>/v1/sessions/testsession1_20240315-043147?include_history=true&amp;length=2</code> Success Response:  <pre><code>{\n    \"session\": {\n        \"session_id\": \"testsession1_20240315-043147\",\n        \"name\": \"TestSession1\",\n        \"description\": \"Test 1\",\n        \"created_epoch\": 1710448307.051328,\n        \"created_datetime\": \"20240315-043147\",\n        \"chat_ids\": [\n            \"openaigpt35turbotest1_20240315_043147\",\n            \"openaigpt4test1_20240315_043147\"\n        ],\n        \"endpoints\": [\n            \"openaigpt35turbotest1\",\n            \"openaigpt4test1\"\n        ],\n        \"prompt_template\": null,\n        \"context_strategy\": null,\n        \"filename\": null,\n        \"chat_history\": {\n            \"openaigpt35turbotest1_20240315_043147\": [],\n            \"openaigpt4test1_20240315_043147\": []\n        }\n    }\n}\n</code></pre> [POST] /v1/sessions This endpoint is use to create new session.   Parameters (body) <pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"endpoints\": [\"string\"]\n}\n</code></pre> Example <pre><code>{\n    \"name\": \"TestSession1\",\n    \"description\": \"Test 1\",\n    \"endpoints\": [\"openaigpt35turbotest1\", \"openaigpt4test1\"]\n}\n</code></pre> Success Response:  <pre><code>{\n    \"session\": {\n        \"session_id\": \"testsession1_20240315-043147\",\n        \"name\": \"TestSession1\",\n        \"description\": \"Test 1\",\n        \"created_epoch\": 1710448307.051328,\n        \"created_datetime\": \"20240315-043147\",\n        \"chat_ids\": [\n            \"openaigpt35turbotest1_20240315_043147\",\n            \"openaigpt4test1_20240315_043147\"\n        ],\n        \"endpoints\": [\n            \"openaigpt35turbotest1\",\n            \"openaigpt4test1\"\n        ],\n        \"prompt_template\": null,\n        \"context_strategy\": null,\n        \"filename\": null,\n        \"chat_history\": null\n    }\n}\n</code></pre> [POST] /v1/sessions/{session_id}/prompt This endpoint is use to send prompts in the session.   Parameters (path):  <code>session_id</code>: The ID of the session to retrieve.   Parameters (body) <pre><code>{\n    \"prompt\": \"string\"\n}\n</code></pre> Example <code>/v1/sessions/testsession1_20240315-044154/prompt</code> <pre><code>{\n    \"prompt\": \"Hello World\"\n}\n</code></pre> Success Response:  <pre><code>{\n    \"openaigpt35turbotest1_20240315_044154\": [\n        {\n            \"chat_record_id\": 1,\n            \"conn_id\": \"conn_id_123\",\n            \"context_strategy\": \"\",\n            \"prompt_template\": \"\",\n            \"prompt\": \"hello world\",\n            \"prepared_prompt\": \"hello world\",\n            \"predicted_result\": \"predicted results\",\n            \"duration\": \"2 secs\",\n            \"prompt_time\": \"03/15/2024, 04:42:02\"\n        }\n    ],\n    \"openaigpt4test1_20240315_044154\": [\n        {\n            \"chat_record_id\": 1,\n            \"conn_id\": \"conn_id_123\",\n            \"context_strategy\": \"\",\n            \"prompt_template\": \"\",\n            \"prompt\": \"hello world\",\n            \"prepared_prompt\": \"hello world\",\n            \"predicted_result\": \"predicted results\",\n            \"duration\": \"2 secs\",\n            \"prompt_time\": \"03/15/2024, 04:42:02\"\n        }\n    ]\n}\n</code></pre>"},{"location":"web_api/web_api_guide/","title":"Running Moonshot as a Web API","text":"<p>Moonshot WebAPI is built using FastAPI. This guide will help you get started and configure your environment.</p>"},{"location":"web_api/web_api_guide/#getting-started","title":"Getting Started","text":"<p>By default, Moonshot WebAPI uses its own configuration settings. However, you can customize these settings by providing your own <code>.env</code> file in the directory where you are running Moonshot.</p>"},{"location":"web_api/web_api_guide/#configuring-your-env-file","title":"Configuring your <code>.env</code> File","text":"<p>The <code>.env</code> file should include the following variables:</p> <ul> <li><code>MS_WEB_API_CONFIG</code>: This is used to specify the path to your configuration file. For example: <code>/User/path/to/your/config.yml</code>.</li> <li><code>APP_ENVIRONMENT</code>: This defines the environment in which you are running Moonshot. For example: <code>PROD</code>.</li> <li><code>HOST</code>: This is the host where you wish to run Moonshot. For example: <code>127.0.0.1</code>.</li> <li><code>PORT</code>: This is the port at which you wish to run your FastAPI. For example: <code>5000</code>.</li> </ul>"},{"location":"web_api/web_api_guide/#configuring-your-configyml-file","title":"Configuring your <code>config.yml</code> File","text":"<p>The <code>config.yml</code> file contains several sections. Here's a brief overview of each section:</p> <ul> <li> <p><code>asyncio</code></p> <ul> <li><code>monitor_task</code>: This flag determines whether to monitor tasks in asyncio or not. For example: <code>monitor_task: false</code>.</li> </ul> </li> <li> <p><code>ssl</code></p> <ul> <li><code>enabled</code>: This flag determines whether SSL is enabled or not. For example: <code>enabled: ${ENABLE_SSL:false}</code>.</li> <li><code>file_path</code>: This is the path to the directory containing the SSL certificate and key files. For example: <code>file_path: \"${SSL_FILE_PATH:./web_api/certs}\"</code>.</li> <li><code>cert_filename</code>: This is the filename of the SSL certificate. For example: <code>cert_filename: \"cert.pem\"</code>.</li> <li><code>key_filename</code>: This is the filename of the SSL key. For example: <code>key_filename: \"key.pem\"</code>.</li> </ul> </li> <li> <p><code>cors</code></p> <ul> <li><code>enabled</code>: This flag determines whether CORS is enabled or not. For example: <code>enabled: false</code>.</li> <li><code>allowed_origins</code>: This is a list of origins that are allowed to make cross-origin requests. For example: <code>allowed_origins: \"http://localhost:3000\"</code>.</li> </ul> </li> <li> <p><code>log</code></p> <ul> <li><code>logging</code>: This flag determines whether logging is enabled or not. For example: <code>logging: ${LOGGING:true}</code>.</li> <li><code>level</code>: This sets the level of logging. It could be <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, or <code>CRITICAL</code>. For example: <code>level: ${LOG_LEVEL:DEBUG}</code>.</li> <li><code>format</code>: This specifies the format of the log messages. For example: <code>format: \"[%(asctime)s] [%(levelname)s] [%(name)s]: %(message)s\"</code>.</li> <li><code>log_file_path</code>: This is the path where the log files will be stored. For example: <code>log_file_path: \"/path/to/write/moonshot.logs\"</code>.</li> <li><code>log_file_max_size</code>: This is the maximum size (in bytes) that a log file can have before it gets rolled over. For example: <code>log_file_max_size: 5242880</code>.</li> <li><code>log_file_backup_count</code>: This is the number of backup log files to keep. For example: <code>log_file_backup_count: 3</code>.</li> </ul> </li> </ul> <p>For example on how to structure your <code>config.yml</code> file, refer to the example provided here.</p>"}]}